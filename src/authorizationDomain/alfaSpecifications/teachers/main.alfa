namespace school.teachers {
    import record.*

    import school.records.filtering.*

    import school.records.kangaroo.*

    policyset Main {
        target
            clause user.userRole == "Teacher"
        condition user.gradeLevel == record.student.grade
        apply firstApplicable

        policyset Read {
            target
                clause action.operation == "Read"
            apply firstApplicable

            permitAccessToRecordsForStudentsInHouseKangaroo

            policyset readRecordsForStudentsInHouseDingo {
                target
                    clause student.house == "Dingo"
                apply denyOverrides

                /*
                 * This policy is used to permit access to current records accessed from the intranet.
                 * It applies filtering obligations to remove specific fields from the records.
                 */
                policy permitButRedactCurrentRecordsAccessedFromIntranet {
                    target
                        clause student.recordType == "Current"
                        clause environment.accessPoint == "Intranet"
                    // Using denyOverrides to ensure that all filtering obligations are applied
                    apply denyOverrides

                    rule permitButRedactStudentInterest {
                        permit
                        condition not(user.house == "Dingo") && not(user.subject == "Math")
                        on permit {
                            obligation filtering.removeField {
                                filtering.fieldToRemove = "student.interest"
                            }
                        }
                    }
                    rule permitButRedactKeepingStudentRecordId {
                        permit
                        condition stringAtLeastOneMemberOf(user.house, stringBag("Kangaroo", "Platypus", "Koala")) &&
                        not(user.subject == "Math")
                        
                        on permit {
                            obligation filtering.keepField {
                                filtering.fieldToKeep = "student.recordId"
                            }
                        }
                    }

                }

                permitKTeachersReadDingoRecordsWithFiltering

                policy permitNonFilteredNonRedactedAccess {
                    apply denyOverrides

                    rule permitNonFilteredNonRedactedAccess {
                        permit
                    }

                }
            }

            policyset readRecordsForStudentsInHouseKoala {
                target
                    clause student.house == "Koala"
                apply firstApplicable

                policy userIsMusicTeacher {
                    target
                        clause user.subject == "Music"
                    apply firstApplicable

                    rule permitRecordsWithRedactedMathReports {
                        condition stringBagSize(student.mathReportsIds) > 0
                        permit
                        on permit {
                            obligation filtering.removeField {
                                filtering.fieldToRemove = "report.comments"
                                filtering.reportsToRedact = student.mathReportsIds
                            }
                        }
                    }

                }
            }

        }

        policyset Search {
            target
                clause action.operation == "Search"
            apply firstApplicable

            permitAccessToRecordsForStudentsInHouseKangaroo

            policyset {
                target
                    clause action.operation == "Search"
                apply onPermitApplySecond

                permitKTeachersReadDingoRecordsWithFiltering

                policy {
                    apply firstApplicable

                    rule { deny }

                }

                policy {
                    apply firstApplicable

                    rule { permit }

                }

        }
        }
    }
}
